// http://ionicframework.com/docs/v2/theming/


// App Global Sass
// --------------------------------------------------
// Put style rules here that you want to apply globally. These
// styles are for the entire app and not just one component.
// Additionally, this file can be also used as an entry point
// to import other Sass files to be included in the output CSS.
//
// Shared Sass variables, which can be used to adjust Ionic's
// default Sass variables, belong in "theme/variables.scss".
//
// To declare rules for a specific mode, create a child rule
// for the .md, .ios, or .wp mode classes. The mode class is
// automatically applied to the <body> element in the app.
.scroll-content {
  background: #f7f7f7;
}
::-webkit-scrollbar{
display:none;
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}

//Empty List
.empty-list {
  position: absolute;
  top: 20%;
  width: 100%;
  text-align: center;

  h1,
  p {
    color: $gray;
  }

  h1 {
    font-size: 3em;
  }

  p {
    font-size: 1.125em;
    width: 70vw;
    margin-left: auto;
    margin-right: auto;
  }

  button {
    background: $dark;
  }

  button.activated,
  button:active {
    background: $dark-active;
  }
}

//Avatar List
ion-list.avatar-list {
  ion-item {
    background: rgba(0, 0, 0, 0.3) !important;

    h2 {
      color: #fff;
    }

    h3 {
      color: $dark-active;

      ion-icon.selected {
        color: $primary;
      }
    }

    p {
      color: $primary !important;
      max-width: 68vw;
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    ion-avatar {
      img {
        width: 2.5em !important;
        height: 2.5em !important;
      }
    }
  }

  ion-item.selected,
  ion-item:active {
    opacity: 0.5;
  }

  ion-fab button,
  ion-fab button.activated {
    background: transparent !important;
  }

  ion-fab button.activated ion-icon {
    opacity: 0.5 !important;
  }

  ion-fab button ion-icon {
    font-size: 2em !important;
    color: $primary;
  }

  ion-icon.success {
    color: $primary;
  }

  ion-icon.danger {
    color: color($colors, danger);
  }

   
}

ion-icon.dark {
    color: $dark;
  }